#!/usr/bin/env python3

import os
import subprocess
import threading
import io
import contextlib

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("GtkSource", "3.0")

from gi.repository import Gtk, Gio, Pango, GtkSource, Gdk


INITIAL_SIZE = 700, 500

class PythonRunnerApp(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="Python Runner")
        self.set_default_size(*INITIAL_SIZE)
        # Set minimum size to prevent resizing below initial size
        self.set_size_request(INITIAL_SIZE[0], INITIAL_SIZE[1])

        css_provider = Gtk.CssProvider()
        css = """
        #run-button image {
            color: #2ECC71;
        }
        #run-button:hover image {
            color: #27AE60;
        }
        """
        css_provider.load_from_data(css.encode())
        Gtk.StyleContext.add_provider_for_screen(
            Gdk.Screen.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        schema_source = Gio.SettingsSchemaSource.get_default()
        schema = schema_source.lookup("com.example.python-runner", False)
        self.settings = Gio.Settings.new_full(schema, None, None)
        self.settings.connect("changed", self.on_settings_changed)

        # Main vertical box
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(vbox)


        # Toolbar
        toolbar = Gtk.Toolbar()

        css_provider = Gtk.CssProvider()
        css = """
        toolbar {
            -GtkToolbar-button-relief: none;
            padding: 0px;
            margin-top: 5px;
            margin-bottom: 0;
            margin-left: 2px;
            margin-right: 2px;            
            border-width: 0px;
        }
        toolbar button {
            margin-top: 5px;
            margin-bottom: 0;
            margin-left: 2px;
            margin-right: 2px;
            padding: 0px;
            border-radius: 0px;
        }
        toolbar button image {
            padding: 0px;
            margin: 0px;
        }
        """
        css_provider.load_from_data(css.encode())
        toolbar.get_style_context().add_provider(
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        # Run button
        run_button = Gtk.ToolButton()
        run_button.set_icon_name("media-playback-start-symbolic")  # GTK play icon
        run_button.set_name("run-button")
        run_button.connect("clicked", self.on_run_clicked)
        toolbar.insert(run_button, 0)

        # Copy button
        copy_button = Gtk.ToolButton()
        copy_button.set_icon_name("edit-copy-symbolic")  # Default GTK copy icon
        copy_button.connect("clicked", self.on_copy_clicked)
        toolbar.insert(copy_button, 1) 

        # Settings button
        settings_button = Gtk.ToolButton()
        settings_button.set_icon_name("preferences-system-symbolic")  # Use an icon
        settings_button.connect("clicked", self.on_settings_clicked)
        toolbar.insert(settings_button, -1) # Add to the end of the toolbar
        vbox.pack_start(toolbar, False, False, 0)

        # Create a Paned widget to allow resizing
        self.paned = Gtk.Paned(orientation=Gtk.Orientation.VERTICAL)
        vbox.pack_start(self.paned, True, True, 0)

        # Scrolled window for code input
        self.code_input = GtkSource.View()

        # Syntax highlight
        self.code_buffer = GtkSource.Buffer()
        self.code_input.set_buffer(self.code_buffer)
        language_manager = GtkSource.LanguageManager()
        python_language = language_manager.get_language("python")
        self.code_buffer.set_language(python_language)
        style_scheme_manager = GtkSource.StyleSchemeManager()
        style_scheme = style_scheme_manager.get_scheme("solarized-dark")  # Use "tango" for a modern theme
        self.code_buffer.set_style_scheme(style_scheme)

        self.code_input.set_wrap_mode(Gtk.WrapMode.WORD)
        self.code_input.set_monospace(True)
        self.code_input.set_left_margin(10)  # Add left padding
        self.code_input.set_right_margin(10)  # Add right padding
        self.code_input.set_top_margin(10)  # Add top padding
        self.code_input.set_bottom_margin(10)  # Add bottom padding

        # Enable line numbers
        self.code_input.set_show_line_numbers(True)

        # Set light gray background color for the code input area
        light_gray = Gdk.RGBA()
        light_gray.parse("#40403f")  # Light gray color
        self.code_input.override_background_color(Gtk.StateFlags.NORMAL, light_gray)

        # Set tab width to 4 spaces
        tab_array = Pango.TabArray.new(initial_size=1, positions_in_pixels=False)
        tab_array.set_tab(0, Pango.TabAlign.LEFT, 4 * Pango.SCALE)  # 4 spaces
        self.code_input.set_tabs(tab_array)

        # Initialize SpaceDrawer
        self.space_drawer = self.code_input.get_space_drawer()
        self.space_drawer.set_enable_matrix(True)

        scrolled_code = Gtk.ScrolledWindow()
        scrolled_code.set_hexpand(True)
        scrolled_code.set_vexpand(True)
        scrolled_code.add(self.code_input)
        self.paned.add1(scrolled_code)  # Add code area to the top pane

        # Scrolled window for output
        self.output_buffer = Gtk.TextBuffer()
        self.output_view = Gtk.TextView(buffer=self.output_buffer)
        self.output_view.set_editable(False)
        self.output_view.set_monospace(True)
        self.output_view.set_left_margin(10)  # Add left padding
        self.output_view.set_right_margin(10)  # Add right padding
        self.output_view.set_top_margin(10)  # Add top padding
        self.output_view.set_bottom_margin(10)  # Add bottom padding
        scrolled_output = Gtk.ScrolledWindow()
        scrolled_output.set_hexpand(True)
        scrolled_output.set_vexpand(True)
        scrolled_output.add(self.output_view)
        self.paned.add2(scrolled_output)  # Add output area to the bottom pane

        # Set initial height of half initial window size
        self.paned.set_position(INITIAL_SIZE[1] // 2 - 50)

        # Status bar
        # Create a compact status bar using a horizontal box instead
        status_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        status_box.set_border_width(0)
        status_box.set_margin_top(0)
        status_box.set_margin_bottom(5)
        
        # Add the status context label
        self.status_label = Gtk.Label()
        self.status_label.set_margin_top(0)
        self.status_label.set_margin_bottom(0)
        self.status_label.set_margin_start(6)
        self.status_label.set_margin_end(6)
        status_box.pack_start(self.status_label, False, False, 0)
        
        # Add a small separator
        separator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)
        separator.set_margin_top(2)
        separator.set_margin_bottom(2)
        status_box.pack_start(separator, False, False, 0)
        
        # Add the message label
        self.status_message = Gtk.Label()
        self.status_message.set_margin_top(0)
        self.status_message.set_margin_bottom(0)
        self.status_message.set_margin_start(6)
        self.status_message.set_margin_end(6)
        status_box.pack_start(self.status_message, True, True, 0)
        
        vbox.pack_start(status_box, False, False, 0)
        # Initialize Python environment status
        self.update_python_env_status()

        # Apply initial settings
        self.apply_settings()

    def on_copy_clicked(self, widget):
        # Get the code from the input area
        code_buffer = self.code_input.get_buffer()
        start_iter = code_buffer.get_start_iter()
        end_iter = code_buffer.get_end_iter()
        code = code_buffer.get_text(start_iter, end_iter, False)

        # Copy the code to the clipboard
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.set_text(code, -1)

        # Show a confirmation in the status bar
        self.status_message.set_text("Code copied to clipboard")

        # Remove the message after 1 second and restore the Python environment info
        threading.Timer(1.0, self.restore_python_env_status).start()

    def restore_python_env_status(self):
        # Restore the Python environment status in the status bar
        self.update_python_env_status()

    def on_run_clicked(self, widget):
        # Get the code from the input area
        code_buffer = self.code_input.get_buffer()
        start_iter = code_buffer.get_start_iter()
        end_iter = code_buffer.get_end_iter()
        code = code_buffer.get_text(start_iter, end_iter, False)

        # Determine the Python interpreter to use
        python_interpreter = self.get_python_interpreter()

        # Redirect stdout to capture output
        output = io.StringIO()
        with contextlib.redirect_stdout(output), contextlib.redirect_stderr(output):
            try:
                # Execute the code using the selected Python interpreter
                result = subprocess.run(
                    [python_interpreter, "-c", code],
                    capture_output=True,
                    text=True,
                )
                if result.returncode == 0:
                    print(result.stdout)
                else:
                    print(f"Error: {result.stderr}")
            except Exception as e:
                print(f"Error: {e}")

        # Display the output
        self.output_buffer.set_text(output.getvalue())

    def on_settings_clicked(self, widget):
        # Create a settings dialog
        dialog = Gtk.Dialog(title="Settings", parent=self, flags=0)
        dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OK, Gtk.ResponseType.OK)
        dialog.set_default_size(300, 200)
        dialog.set_resizable(False)  # Prevent resizing

        # Create a vertical box for settings
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6, margin=12)
        dialog.get_content_area().add(vbox)

        # Draw whitespaces toggle
        draw_whitespaces_hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=12)
        draw_whitespaces_label = Gtk.Label(label="Draw Whitespaces:")
        self.draw_whitespaces_switch = Gtk.Switch()
        self.draw_whitespaces_switch.set_active(self.settings.get_boolean("draw-whitespaces"))
        draw_whitespaces_hbox.pack_start(draw_whitespaces_label, True, True, 0)
        draw_whitespaces_hbox.pack_end(self.draw_whitespaces_switch, False, False, 0)
        vbox.pack_start(draw_whitespaces_hbox, False, False, 0)

        # Tab size adjustment
        tab_size_hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=12)
        tab_size_label = Gtk.Label(label="Tab Size (Spaces):")
        self.tab_size_spin = Gtk.SpinButton.new_with_range(1, 8, 1)
        self.tab_size_spin.set_value(self.settings.get_int("tab-size"))
        tab_size_hbox.pack_start(tab_size_label, True, True, 0)
        tab_size_hbox.pack_end(self.tab_size_spin, False, False, 0)
        vbox.pack_start(tab_size_hbox, False, False, 0)

        # Translate tabs to spaces toggle
        translate_tabs_hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=12)
        translate_tabs_label = Gtk.Label(label="Translate Tabs to Spaces:")
        self.translate_tabs_switch = Gtk.Switch()
        self.translate_tabs_switch.set_active(self.settings.get_boolean("translate-tabs"))
        translate_tabs_hbox.pack_start(translate_tabs_label, True, True, 0)
        translate_tabs_hbox.pack_end(self.translate_tabs_switch, False, False, 0)
        vbox.pack_start(translate_tabs_hbox, False, False, 0)

        # Use custom venv toggle
        use_custom_venv_hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=12)
        use_custom_venv_label = Gtk.Label(label="Use Custom Venv:")
        self.use_custom_venv_switch = Gtk.Switch()
        self.use_custom_venv_switch.set_active(self.settings.get_boolean("use-custom-venv"))
        use_custom_venv_hbox.pack_start(use_custom_venv_label, True, True, 0)
        use_custom_venv_hbox.pack_end(self.use_custom_venv_switch, False, False, 0)
        vbox.pack_start(use_custom_venv_hbox, False, False, 0)

        # Connect signal to the "Use Custom Venv" switch
        self.use_custom_venv_switch.connect("state-set", self.on_use_custom_venv_toggled, dialog)

        # Show the dialog
        dialog.show_all()
        response = dialog.run()

        # Save settings if OK is clicked
        if response == Gtk.ResponseType.OK:
            self.settings.set_boolean("draw-whitespaces", self.draw_whitespaces_switch.get_active())
            self.settings.set_int("tab-size", self.tab_size_spin.get_value_as_int())
            self.settings.set_boolean("translate-tabs", self.translate_tabs_switch.get_active())
            self.settings.set_boolean("use-custom-venv", self.use_custom_venv_switch.get_active())

            # Update Python environment status
            self.update_python_env_status()

        dialog.destroy()

    def on_use_custom_venv_toggled(self, switch, state, dialog):
        # If the switch is toggled on, open the folder selection dialog
        if state:
            folder_dialog = Gtk.FileChooserDialog(
                title="Select Venv Folder",
                parent=dialog,
                action=Gtk.FileChooserAction.SELECT_FOLDER,
            )
            folder_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OK, Gtk.ResponseType.OK)
            response = folder_dialog.run()
            if response == Gtk.ResponseType.OK:
                venv_folder = folder_dialog.get_filename()
                self.settings.set_string("venv-folder", venv_folder)
                self.update_python_env_status()  # Update status bar immediately
            folder_dialog.destroy()

    def on_settings_changed(self, settings, key):
        # Apply settings when they change
        self.apply_settings()

    def apply_settings(self):
        # Apply draw whitespaces setting
        if self.settings.get_boolean("draw-whitespaces"):
            self.space_drawer.set_types_for_locations(
                GtkSource.SpaceLocationFlags.ALL,
                GtkSource.SpaceTypeFlags.SPACE | GtkSource.SpaceTypeFlags.TAB
            )
        else:
            self.space_drawer.set_types_for_locations(GtkSource.SpaceLocationFlags.ALL, 0)

        # Apply tab size setting
        tab_size = self.settings.get_int("tab-size")
        tab_array = Pango.TabArray.new(initial_size=1, positions_in_pixels=False)
        tab_array.set_tab(0, Pango.TabAlign.LEFT, tab_size * Pango.SCALE)
        self.code_input.set_tabs(tab_array)

        # Apply translate tabs to spaces setting
        if self.settings.get_boolean("translate-tabs"):
            # Insert spaces instead of tabs
            self.code_input.set_insert_spaces_instead_of_tabs(True)
            # Set the number of spaces to insert
            self.code_input.set_tab_width(tab_size)
        else:
            # Insert tabs
            self.code_input.set_insert_spaces_instead_of_tabs(False)

    def get_python_interpreter(self):
        # Get the Python interpreter based on settings
        if self.settings.get_boolean("use-custom-venv"):
            venv_folder = self.settings.get_string("venv-folder")
            if venv_folder:
                return os.path.join(venv_folder, "bin", "python3")
        return "python3"

    def update_python_env_status(self):
        python_interpreter = self.get_python_interpreter()
        try:
            result = subprocess.run(
                [python_interpreter, "--version"],
                capture_output=True,
                text=True,
            )
            python_version = result.stdout.strip().replace("Python ", "") if result.returncode == 0 else "Unknown"
        except Exception:
            python_version = "Unknown"

        if self.settings.get_boolean("use-custom-venv"):
            venv_folder = self.settings.get_string("venv-folder")
            text = f"Using Python ({python_version}) {venv_folder}" if venv_folder else "Custom venv not selected"
        else:
            text = f"Using system Python ({python_version})"
            
        self.status_label.set_text(text)

if __name__ == "__main__":
    app = PythonRunnerApp()
    app.set_position(Gtk.WindowPosition.CENTER)
    app.connect("destroy", Gtk.main_quit)
    app.show_all()
    Gtk.main()
